{"version":3,"sources":["App/Components/main/lazy/WrapperImg.js","App/utils/loadRealImage.js"],"names":["WrapperImg","image","useState","loading","setLoading","placeholder","src","setSrc","firstTimeVisible","setFTV","useEffect","loadRealImage","then","once","onChange","isVisible","md","delay","to","opacity","alt","style","width","filter","className","Promise","resolve","window","Image","onload"],"mappings":"6LAiDeA,UA3Cf,YAAgC,IAAVC,EAAS,EAATA,MAAS,EACCC,oBAAS,GADV,mBACtBC,EADsB,KACbC,EADa,OAEPF,mBAASD,EAAMI,aAFR,mBAEtBC,EAFsB,KAEjBC,EAFiB,OAGML,oBAAS,GAHf,mBAGtBM,EAHsB,KAGJC,EAHI,KAmB7B,OAdAC,qBAAU,WACJF,GACFG,YAAcV,EAAMK,KACjBM,MAAK,WAAWL,EAAON,EAAMK,QAC7BM,MAAK,WAAWR,GAAW,QAE/B,CAACI,EAAkBP,EAAMK,MAS1B,cAAC,IAAD,CAAkBO,MAAI,EAACC,SAPD,SAACC,GAClBP,GACCO,GAAWN,GAAO,IAKxB,SACG,gBAAGM,EAAH,EAAGA,UAAH,OACC,cAAC,IAAD,CAAKC,GAAI,EAAT,SACE,cAAC,SAAD,CAAQC,MAAO,IAAKC,GAAI,CAAEC,QAASJ,EAAY,EAAI,GAAnD,SACG,gBAAGI,EAAH,EAAGA,QAAH,OACC,cAAC,IAAD,CACEb,IAAKA,EACLc,IAAKnB,EAAMmB,IACXC,MAAO,CACLF,UACAG,MAAO,OACPC,OAAQpB,EAAU,YAAc,QAElCqB,UAAU,2C,gCChCXb,IAPO,SAACL,GAAD,OACpB,IAAImB,SAAQ,SAACC,GACX,IAAMzB,EAAQ,IAAI0B,OAAOC,MACzB3B,EAAM4B,OAASH,EACfzB,EAAMK,IAAMA","file":"static/js/23.738bd603.chunk.js","sourcesContent":["import VisibilitySensor from \"react-visibility-sensor\";\nimport loadRealImage from \"../../../utils/loadRealImage\";\nimport { Spring } from \"react-spring/renderprops\";\nimport { Col, Image } from \"react-bootstrap\";\nimport { useState, useEffect } from \"react\";\n\nfunction WrapperImg({ image }) {\n  const [loading, setLoading] = useState(true);\n  const [src, setSrc] = useState(image.placeholder);\n  const [firstTimeVisible, setFTV] = useState(false);\n\n  useEffect(() => {\n    if (firstTimeVisible) {\n      loadRealImage(image.src)\n        .then(() => void setSrc(image.src))\n        .then(() => void setLoading(false));\n    }\n  }, [firstTimeVisible, image.src]);\n\n  const onChangeVisible = (isVisible) => {\n    if (!firstTimeVisible) {\n      if (isVisible) setFTV(true);\n    }\n  };\n\n  return (\n    <VisibilitySensor once onChange={onChangeVisible}>\n      {({ isVisible }) => (\n        <Col md={4}>\n          <Spring delay={100} to={{ opacity: isVisible ? 1 : 0 }}>\n            {({ opacity }) => (\n              <Image\n                src={src}\n                alt={image.alt}\n                style={{\n                  opacity,\n                  width: \"100%\",\n                  filter: loading ? \"blur(5px)\" : \"none\",\n                }}\n                className=\"img-fluid img-thumbnail mt-3\"\n              />\n            )}\n          </Spring>\n        </Col>\n      )}\n    </VisibilitySensor>\n  );\n}\n\nexport default WrapperImg;\n","const loadRealImage = (src) =>\n  new Promise((resolve) => {\n    const image = new window.Image();\n    image.onload = resolve;\n    image.src = src;\n  });\n\nexport default loadRealImage;\n"],"sourceRoot":""}