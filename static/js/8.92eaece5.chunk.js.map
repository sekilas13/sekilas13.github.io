{"version":3,"sources":["App/Components/Navigasi.js","App/hooks/useDarkMode.js"],"names":["observer","store","useContext","Context","ref","useRef","themeColor","document","querySelector","msApp","light","dark","setMode","mode","window","localStorage","setItem","setTheme","useEffect","localTheme","getItem","content","theme","useDarkMode","themeToggler","useState","expanded","state","UNSAFE_setState","location","useLocation","history","useHistory","setState","data","handleLink","e","preventDefault","el","target","id","setTimeout","tujuan","offsetTop","current","getBoundingClientRect","height","scrollTo","Link","main","nama","to","covid","Navbar","bg","variant","className","sticky","expand","onToggle","Container","Brand","href","onClick","pathname","querySelectorAll","forEach","classList","remove","push","Toggle","aria-controls","Collapse","Nav","as","SPALink","map","link","i","Form","Row","icon","SunSolid","SunRegular","Check","type","checked","onChange","label","MoonRegular","MoonSolid"],"mappings":"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","file":"static/js/8.92eaece5.chunk.js","sourcesContent":["import { useRef, useState, useContext, Fragment } from \"react\";\nimport { Container, Navbar, Nav, Form } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useDarkMode } from \"../hooks/useDarkMode\";\nimport {\n  faSun as SunSolid,\n  faMoon as MoonSolid,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  faSun as SunRegular,\n  faMoon as MoonRegular,\n} from \"@fortawesome/free-regular-svg-icons\";\nimport { useLocation, useHistory, Link as SPALink } from \"react-router-dom\";\nimport { Context } from \"../utils/stateProvider\";\nimport { observer } from \"mobx-react\";\n\nfunction Navigasi() {\n  const store = useContext(Context);\n  const ref = useRef();\n  const [themeToggler] = useDarkMode();\n  const [state, UNSAFE_setState] = useState({\n    expanded: false,\n  });\n\n  const location = useLocation();\n  const history = useHistory();\n\n  const theme = store.theme;\n\n  const setState = (data) => UNSAFE_setState({ ...state, ...data });\n\n  const handleBrand = (e) => {\n    e.preventDefault();\n    if (location.pathname === \"/\") {\n      const Links = document.querySelectorAll(\".nav-link\");\n      Links.forEach((el) => {\n        el.classList.remove(\"active\");\n      });\n      if (state.expanded) {\n        setState({ expanded: false });\n        setTimeout(() => window.scrollTo(0, 0), 150);\n      } else {\n        window.scrollTo(0, 0);\n      }\n    } else {\n      if (state.expanded) {\n        setState({ expanded: false });\n        setTimeout(() => history.push(\"/\"), 300);\n      } else {\n        history.push(\"/\");\n      }\n    }\n  };\n\n  const handleLink = (e) => {\n    e.preventDefault();\n\n    setState({ expanded: false });\n    const el = document.querySelector(e.target.id);\n    if (state.expanded) {\n      setTimeout(() => {\n        const tujuan =\n          el.offsetTop - ref.current.getBoundingClientRect().height;\n        window.scrollTo(0, tujuan);\n      }, 150);\n    } else {\n      const tujuan = el.offsetTop - ref.current.getBoundingClientRect().height;\n      window.scrollTo(0, tujuan);\n    }\n  };\n\n  const Link = {\n    main: [\n      { nama: \"Deskripsi\", to: \"#deskripsi\" },\n      { nama: \"Pandangan Orang\", to: \"#KataOrang\" },\n      { nama: \"Gambar\", to: \"#gambar\" },\n    ],\n    covid: [\n      { nama: \"Kondisi Terkini\", to: \"#all\" },\n      { nama: \"Data Provinsi\", to: \"#provinsi\" },\n    ],\n  };\n\n  return (\n    <Navbar\n      bg={theme === \"light\" && theme}\n      variant={theme}\n      className={theme === \"dark\" && \"navbar-custom\"}\n      sticky=\"top\"\n      expand=\"lg\"\n      expanded={state.expanded}\n      onToggle={() => setState({ expanded: state.expanded ? false : true })}\n      ref={ref}\n    >\n      <Container>\n        <Navbar.Brand href=\"#\" onClick={handleBrand}>\n          KIR\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"navigasi-nav\" />\n        <Navbar.Collapse id=\"navigasi-nav\">\n          <Nav className=\"ml-auto text-center\">\n            {location.pathname === \"/\" && (\n              <Fragment>\n                <Nav.Link\n                  as={SPALink}\n                  to=\"/covid\"\n                  onClick={() =>\n                    state.expanded && setState({ expanded: false })\n                  }\n                >\n                  Informasi Covid 19\n                </Nav.Link>\n\n                {Link.main.map((link, i) => (\n                  <Nav.Link\n                    key={i}\n                    href={link.to}\n                    id={link.to}\n                    onClick={handleLink}\n                  >\n                    {link.nama}\n                  </Nav.Link>\n                ))}\n              </Fragment>\n            )}\n            {location.pathname === \"/covid\" && (\n              <Fragment>\n                <Nav.Link\n                  as={SPALink}\n                  to=\"/\"\n                  onClick={() =>\n                    state.expanded && setState({ expanded: false })\n                  }\n                >\n                  Halaman Utama\n                </Nav.Link>\n\n                {Link.covid.map((link, i) => (\n                  <Nav.Link\n                    key={i}\n                    href={link.to}\n                    id={link.to}\n                    onClick={handleLink}\n                  >\n                    {link.nama}\n                  </Nav.Link>\n                ))}\n              </Fragment>\n            )}\n          </Nav>\n          <Form>\n            <Form.Row className=\"justify-content-center\">\n              <small className=\"sun\">\n                <FontAwesomeIcon\n                  icon={theme !== \"dark\" ? SunSolid : SunRegular}\n                />\n              </small>\n              <Form.Check\n                type=\"switch\"\n                id=\"custom-switch\"\n                checked={theme === \"light\" ? false : true}\n                onChange={themeToggler}\n                label=\"\"\n              />\n              <small className=\"moon\">\n                <FontAwesomeIcon\n                  icon={theme !== \"dark\" ? MoonRegular : MoonSolid}\n                />\n              </small>\n            </Form.Row>\n          </Form>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n}\n\nexport default observer(Navigasi);\n","import { useEffect, useContext } from \"react\";\nimport { Context } from \"../utils/stateProvider\";\n\nexport const useDarkMode = () => {\n  const store = useContext(Context);\n\n  const themeColor = document.querySelector('meta[name=\"theme-color\"]');\n  const msApp = document.querySelector('meta[name=\"msapplication-TileColor\"]');\n\n  const light = \"#f0efeb\";\n  const dark = \"#323234\";\n\n  const setMode = (mode) => {\n    window.localStorage.setItem(\"theme\", mode);\n    store.setTheme(mode);\n  };\n\n  const themeToggler = () => {\n    if (store.theme === \"light\") {\n      setMode(\"dark\");\n      themeColor.content = dark;\n      msApp.content = dark;\n    } else {\n      setMode(\"light\");\n      themeColor.content = light;\n      msApp.content = light;\n    }\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem(\"theme\");\n    localTheme ? store.setTheme(localTheme) : setMode(\"light\");\n    if (localTheme && localTheme === \"light\") {\n      themeColor.content = light;\n      msApp.content = light;\n    } else {\n      themeColor.content = dark;\n      msApp.content = dark;\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return [themeToggler];\n};\n"],"sourceRoot":""}