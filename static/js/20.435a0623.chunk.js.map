{"version":3,"sources":["App/Components/main/lazy/FooterEmail.js","../../src/observers.ts","../../src/InView.tsx"],"names":["From","transform","opacity","Enter","Leave","FooterEmail","inView","ref","items","from","enter","leave","show","props","style","href","ObserverMap","RootIds","rootId","optionsToId","options","Object","key","root","observe","element","callback","id","instance","elements","observer","IntersectionObserver","entries","entry","thresholds","Array","createObserver","callbacks","isPlainChildren","InView","node","_unobserveCb","handleNode","undefined","handleChange","componentDidUpdate","prevProps","this","componentWillUnmount","observeNode","threshold","rootMargin","trackVisibility","delay","unobserve","render","children","as","tag","triggerOnce","initialInView"],"mappings":"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","file":"static/js/20.435a0623.chunk.js","sourcesContent":["import { InView } from \"react-intersection-observer\";\nimport { Transition } from \"react-spring/renderprops\";\n\nconst From = { transform: \"translate3d(-20px,0,0)\", opacity: 0 };\nconst Enter = { transform: \"translate3d(0px,0,0)\", opacity: 1 };\nconst Leave = { opacity: 0 };\n\nfunction FooterEmail() {\n  return (\n    <InView>\n      {({ inView, ref }) => (\n        <div ref={ref}>\n          <Transition items={inView} from={From} enter={Enter} leave={Leave}>\n            {(show) =>\n              show &&\n              ((props) => (\n                <p style={props}>\n                  Ada pertanyaan ? Tanyakan lewat email{\" \"}\n                  <a href=\"mailto:smpn13kir@gmail.com\">smpn13kir@gmail.com</a>\n                </p>\n              ))\n            }\n          </Transition>\n        </div>\n      )}\n    </InView>\n  );\n}\n\nexport default FooterEmail;\n","import { ObserverInstanceCallback } from './index';\n\nconst ObserverMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: Map<Element, string> = new Map();\n\nlet rootId = 0;\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root?: Element | null) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n) {\n  if (!element) return () => {};\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observers';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n * Monitors scroll, and triggers the children function with updated props\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const { threshold, root, rootMargin, trackVisibility, delay } = this.props;\n\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay,\n    });\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n"],"sourceRoot":""}