{"version":3,"sources":["App/Components/Navigasi/index.js","App/hooks/useDarkMode.js"],"names":["FormSwitcher","loadable","NavLink","memo","observer","store","useContext","Context","ref","useRef","themeColor","document","querySelector","msApp","light","dark","setMode","mode","window","localStorage","setItem","setTheme","useEffect","localTheme","getItem","content","theme","useDarkMode","themeToggler","useState","expanded","state","UNSAFE_setState","location","useLocation","history","useHistory","setState","useCallback","data","expandClose","tToggler","getHeight","current","getBoundingClientRect","height","Navbar","bg","variant","className","sticky","expand","onToggle","Container","Brand","href","onClick","e","preventDefault","pathname","querySelectorAll","forEach","el","classList","remove","setTimeout","scrollTo","push","Toggle","aria-controls","Collapse","id","Nav","path","setExpandClose"],"mappings":"4MAQMA,EAAeC,aAAS,kBAAM,gEAC9BC,EAAUD,aAAS,kBAAM,kCAoFhBE,yBAAKC,aAlFpB,WACE,IAAMC,EAAQC,qBAAWC,KACnBC,EAAMC,mBAFM,ECRO,WACzB,IAAMJ,EAAQC,qBAAWC,KAEnBG,EAAaC,SAASC,cAAc,4BACpCC,EAAQF,SAASC,cAAc,wCAE/BE,EAAQ,UACRC,EAAO,UAEPC,EAAU,SAACC,GACfC,OAAOC,aAAaC,QAAQ,QAASH,GACrCZ,EAAMgB,SAASJ,IA4BjB,OAbAK,qBAAU,WACR,IAAMC,EAAaL,OAAOC,aAAaK,QAAQ,SAC/CD,EAAalB,EAAMgB,SAASE,GAAcP,EAAQ,SAC9CO,GAA6B,UAAfA,GAChBb,EAAWe,QAAUX,EACrBD,EAAMY,QAAUX,IAEhBJ,EAAWe,QAAUV,EACrBF,EAAMY,QAAUV,KAGjB,IAEI,CAzBc,WACC,UAAhBV,EAAMqB,OACRV,EAAQ,QACRN,EAAWe,QAAUV,EACrBF,EAAMY,QAAUV,IAEhBC,EAAQ,SACRN,EAAWe,QAAUX,EACrBD,EAAMY,QAAUX,KDXGa,GAAhBC,EAHW,sBAIeC,mBAAS,CACxCC,UAAU,IALM,mBAIXC,EAJW,KAIJC,EAJI,KAQZC,EAAWC,cACXC,EAAUC,cAEVV,EAAQrB,EAAMqB,MAEdW,EAAWC,uBACf,SAACC,GAAD,OAAUP,EAAgB,2BAAKD,GAAUQ,MACzC,CAACR,IAEGS,EAAcF,uBAAY,kBAAMD,EAAS,CAAEP,UAAU,MAAU,CACnEO,IAEII,EAAWH,uBAAY,WAAWV,MAAgB,CAACA,IACnDc,EAAYJ,uBAChB,kBACE9B,EAAImC,QAAUnC,EAAImC,QAAQC,wBAAwBC,OAASrC,EAAImC,UACjE,CAACnC,IA0BH,OACE,cAACsC,EAAA,EAAD,CACEC,GAAc,UAAVrB,GAAqBA,EACzBsB,QAAStB,EACTuB,UAAqB,SAAVvB,GAAoB,gBAC/BwB,OAAO,MACPC,OAAO,KACPrB,SAAUC,EAAMD,SAChBsB,SAAU,kBAAMf,EAAS,CAAEP,UAAUC,EAAMD,YAC3CtB,IAAKA,EARP,SAUE,eAAC6C,EAAA,EAAD,WACE,cAACP,EAAA,EAAOQ,MAAR,CAAcC,KAAK,IAAIC,QAnCT,SAACC,IACnBA,EAAEC,iBACwB,MAAtBzB,EAAS0B,WACGhD,SAASiD,iBAAiB,aAClCC,SAAQ,SAACC,GACbA,EAAGC,UAAUC,OAAO,aAElBjC,EAAMD,UACRO,EAAS,CAAEP,UAAU,IACrBmC,YAAW,kBAAM/C,OAAOgD,SAAS,EAAG,KAAI,MAExChD,OAAOgD,SAAS,EAAG,IAGjBnC,EAAMD,UACRO,EAAS,CAAEP,UAAU,IACrBmC,YAAW,kBAAM9B,EAAQgC,KAAK,OAAM,MAEpChC,EAAQgC,KAAK,MAiBb,iBAGA,cAACrB,EAAA,EAAOsB,OAAR,CAAeC,gBAAc,iBAC7B,eAACvB,EAAA,EAAOwB,SAAR,CAAiBC,GAAG,eAApB,UACE,cAACC,EAAA,EAAD,CAAKvB,UAAU,sBAAf,SACE,cAAC/C,EAAD,CACEuE,KAAMxC,EAAS0B,SACfjB,UAAWA,EACXZ,SAAUC,EAAMD,SAChB4C,eAAgBlC,MAGpB,cAACxC,EAAD,CAAc0B,MAAOA,EAAOe,SAAUA","file":"static/js/28.61bb064b.chunk.js","sourcesContent":["import { useRef, useState, useContext, useCallback, memo } from \"react\";\nimport { Container, Navbar, Nav } from \"react-bootstrap\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { useDarkMode } from \"../../hooks/useDarkMode\";\nimport { Context } from \"../../utils/stateProvider\";\nimport loadable from \"@loadable/component\";\nimport { observer } from \"mobx-react\";\n\nconst FormSwitcher = loadable(() => import(\"./Memoized/FormSwitcher\"));\nconst NavLink = loadable(() => import(\"./Memoized/NavLink\"));\n\nfunction Navigasi() {\n  const store = useContext(Context);\n  const ref = useRef();\n  const [themeToggler] = useDarkMode();\n  const [state, UNSAFE_setState] = useState({\n    expanded: false,\n  });\n\n  const location = useLocation();\n  const history = useHistory();\n\n  const theme = store.theme;\n\n  const setState = useCallback(\n    (data) => UNSAFE_setState({ ...state, ...data }),\n    [state]\n  );\n  const expandClose = useCallback(() => setState({ expanded: false }), [\n    setState,\n  ]);\n  const tToggler = useCallback(() => void themeToggler(), [themeToggler]);\n  const getHeight = useCallback(\n    () =>\n      ref.current ? ref.current.getBoundingClientRect().height : ref.current,\n    [ref]\n  );\n\n  const handleBrand = (e) => {\n    e.preventDefault();\n    if (location.pathname === \"/\") {\n      const Links = document.querySelectorAll(\".nav-link\");\n      Links.forEach((el) => {\n        el.classList.remove(\"active\");\n      });\n      if (state.expanded) {\n        setState({ expanded: false });\n        setTimeout(() => window.scrollTo(0, 0), 150);\n      } else {\n        window.scrollTo(0, 0);\n      }\n    } else {\n      if (state.expanded) {\n        setState({ expanded: false });\n        setTimeout(() => history.push(\"/\"), 300);\n      } else {\n        history.push(\"/\");\n      }\n    }\n  };\n\n  return (\n    <Navbar\n      bg={theme === \"light\" && theme}\n      variant={theme}\n      className={theme === \"dark\" && \"navbar-custom\"}\n      sticky=\"top\"\n      expand=\"lg\"\n      expanded={state.expanded}\n      onToggle={() => setState({ expanded: state.expanded ? false : true })}\n      ref={ref}\n    >\n      <Container>\n        <Navbar.Brand href=\"#\" onClick={handleBrand}>\n          KIR\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"navigasi-nav\" />\n        <Navbar.Collapse id=\"navigasi-nav\">\n          <Nav className=\"ml-auto text-center\">\n            <NavLink\n              path={location.pathname}\n              getHeight={getHeight}\n              expanded={state.expanded}\n              setExpandClose={expandClose}\n            />\n          </Nav>\n          <FormSwitcher theme={theme} tToggler={tToggler} />\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n}\n\nexport default memo(observer(Navigasi));\n","import { useEffect, useContext } from \"react\";\nimport { Context } from \"../utils/stateProvider\";\n\nexport const useDarkMode = () => {\n  const store = useContext(Context);\n\n  const themeColor = document.querySelector('meta[name=\"theme-color\"]');\n  const msApp = document.querySelector('meta[name=\"msapplication-TileColor\"]');\n\n  const light = \"#f0efeb\";\n  const dark = \"#323234\";\n\n  const setMode = (mode) => {\n    window.localStorage.setItem(\"theme\", mode);\n    store.setTheme(mode);\n  };\n\n  const themeToggler = () => {\n    if (store.theme === \"light\") {\n      setMode(\"dark\");\n      themeColor.content = dark;\n      msApp.content = dark;\n    } else {\n      setMode(\"light\");\n      themeColor.content = light;\n      msApp.content = light;\n    }\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem(\"theme\");\n    localTheme ? store.setTheme(localTheme) : setMode(\"light\");\n    if (localTheme && localTheme === \"light\") {\n      themeColor.content = light;\n      msApp.content = light;\n    } else {\n      themeColor.content = dark;\n      msApp.content = dark;\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return [themeToggler];\n};\n"],"sourceRoot":""}